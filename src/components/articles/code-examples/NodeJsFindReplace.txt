const { resolve } = require('path')
const { readdir, readFile, writeFile } = require('fs').promises
const filesToInclude = 'src'
main()

function find(content) {
  return content.includes('<what you are searching for>')
}

function replace(fileName, content) {
  /* go wild. add new files, make multiple replacements, 
      parse as AST if regex won't cut it (xml/html for instance), etc.*/
  return content.replace(/original_thing/g, 'new_thing')
}

function fileNameFilter(file) {
  return file.endsWith('.svelte') || file.endsWith('.js')
}

async function main() {
  const filesToIncludeDir = resolve(__dirname, '..', filesToInclude)
  const files = await getFiles(filesToIncludeDir)
  const filesToSearch = files.filter(fileNameFilter)
  console.log(`Searching ${filesToSearch.length} file(s)...`)
  let modifiedCount = 0
  await Promise.all(filesToSearch.map(async file => {
    let content = (await readFile(file)).toString()
    if (find(content)) {
      console.log(file)
      content = replace(file, content)
      await writeFile(file, content)
      modifiedCount++
    }
  }))
  console.log(`${modifiedCount} files were modified.`)
}

async function getFiles(dir) {
  const dirents = await readdir(dir, { withFileTypes: true })
  const files = await Promise.all(dirents.map((dirent) => {
    const res = resolve(dir, dirent.name)
    return dirent.isDirectory() ? getFiles(res) : res
  }))
  return Array.prototype.concat(...files)
}